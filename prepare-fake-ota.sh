#!/bin/bash

if [[ $(id -u) -ne 0 ]] ; then
    exec fakeroot -- $0 $*
fi

HERE=$(pwd)
SCRIPT="$(dirname "$(realpath "$0")")"/build
if [ ! -d "$SCRIPT" ]; then
    SCRIPT="$(dirname "$SCRIPT")"
fi

source "${HERE}/deviceinfo"
source "$SCRIPT/common_functions.sh"

# Fetches android9 rootfs and generic system image to prepare flashable image from CI-built device tarball
URL='https://system-image.ubports.com'
case "${deviceinfo_ubuntu_touch_release:-focal}" in
    "focal")
        DEFAULT_ROOTFS_URL="https://ci.ubports.com/job/focal-hybris-rootfs-arm64/job/master/lastSuccessfulBuild/artifact/ubuntu-touch-android9plus-rootfs-arm64.tar.gz"
        DEFAULT_OTA_CHANNEL="20.04/arm64/android9plus/devel"
        ;;
    *)
        # Both overrides need to be specified, if no ubuntu touch release is set
        if [ -z "${ROOTFS_URL+x}" ] || [ -z "${OTA_CHANNEL+x}" ]; then
            print_error "Unsupported ubuntu touch release: '$deviceinfo_ubuntu_touch_release'"
            exit 1
        fi
        ;;
esac
ROOTFS_URL=${ROOTFS_URL:-$DEFAULT_ROOTFS_URL}
OTA_CHANNEL=${OTA_CHANNEL:-$DEFAULT_OTA_CHANNEL}
DEVICE_GENERIC_URL_BASE='https://ci.ubports.com/job/UBportsCommunityPortsJenkinsCI/job/ubports%252Fporting%252Fcommunity-ports%252Fjenkins-ci%252Fgeneric_arm64/job'

# shellcheck disable=SC2154
case "$deviceinfo_halium_version" in
    9)
        DEVICE_GENERIC_URL="$DEVICE_GENERIC_URL_BASE/main/lastSuccessfulBuild/artifact/halium_halium_arm64.tar.xz"
        ;;
    10)
        # shellcheck disable=SC2154
        case "$deviceinfo_arch" in
            arm) DEVICE_GENERIC_URL="$DEVICE_GENERIC_URL_BASE/halium-10.0-arm32/lastSuccessfulBuild/artifact/halium_halium_arm.tar.xz";;
            aarch64) DEVICE_GENERIC_URL="$DEVICE_GENERIC_URL_BASE/halium-10.0/lastSuccessfulBuild/artifact/halium_halium_arm64.tar.xz";;
        esac
        ;;
    11)
        DEVICE_GENERIC_URL="$DEVICE_GENERIC_URL_BASE/halium-11.0/lastSuccessfulBuild/artifact/halium_halium_arm64.tar.xz"
        ;;
    12)
        DEVICE_GENERIC_URL="$DEVICE_GENERIC_URL_BASE/halium-12.0/lastSuccessfulBuild/artifact/halium_halium_arm64.tar.xz"
        ;;
    13)
        DEVICE_GENERIC_URL="$DEVICE_GENERIC_URL_BASE/halium-13.0/lastSuccessfulBuild/artifact/halium_halium_arm64.tar.xz"
        ;;
    *)
        print_error "Unsupported halium version: '$deviceinfo_halium_version'"
        exit 1
        ;;
esac

DEVICE_TARBALL="$1"
OUTPUT="$2"

mkdir -p "$OUTPUT" || true

download_file() {
    print_header "Downloading '$1' to '$2'"
    wget "$1" -P "$2"
}

download_file_and_asc() {
    print_header "Downloading '$1' to '$2'"
    wget "$1" -P "$2"
    print_header "Downloading '$1.asc' to '$2'"
    wget "$1.asc" -P "$2"
}

# Downloads master and signing keyrings
if [ -f "$OUTPUT/image-signing.tar.xz" ]; then
    print_info "File ("$OUTPUT/image-signing.tar.xz") already exists, skipping download."
else
    download_file_and_asc "${URL}/gpg/image-signing.tar.xz" "$OUTPUT"
fi
if [ -f "$OUTPUT/image-master.tar.xz" ]; then
    print_info "File ("$OUTPUT/image-master.tar.xz") already exists, skipping download."
else
    download_file_and_asc "${URL}/gpg/image-master.tar.xz" "$OUTPUT"
fi

# Start to generate ubuntu_command file
echo '# Generated by ubports rootfs-builder-debos' > "$OUTPUT/ubuntu_command"

cat << EOF >> "$OUTPUT/ubuntu_command"
format system
load_keyring image-master.tar.xz image-master.tar.xz.asc
load_keyring image-signing.tar.xz image-signing.tar.xz.asc
mount system
EOF

# Download and prepare rootfs
file=$(basename "$ROOTFS_URL")
if [ -f "$OUTPUT/$file" ]; then
    print_info "File ("$OUTPUT/$file") already exists, skipping download."
else
    download_file "$ROOTFS_URL" "$OUTPUT"
fi
mkdir -p "$OUTPUT/rootfs/system"
cd "$OUTPUT/rootfs"
print_header "Extracting rootfs..."
XZ_OPT="-T0" tar xpzf "../$file" --numeric-owner -C system

# Enable SSH and USB tethering, and disable secure ADBD, for debugging in devel-flashable builds
echo "start on startup" > system/etc/init/ssh.override
echo "exec /usr/sbin/sshd -D -o PasswordAuthentication=yes -o PermitEmptyPasswords=yes" >> system/etc/init/ssh.override

echo "start on startup" > system/etc/init/usb-tethering.conf
echo "exec /bin/bash /usr/bin/usb-tethering" >> system/etc/init/usb-tethering.conf

cat >system/etc/default/adbd <<EOF
# This file is overwritten by prepare-fake-ota.sh to disable ADBD's host key
# verification ("secure ADBD") by default, to aid in debugging.
ADBD_SECURE=0
EOF

print_header "Repacking rootfs..."
XZ_OPT="-1 -T0" tar cJf "../rootfs.tar.xz" system
cd -
rm -rf "./$OUTPUT/rootfs"

file="rootfs.tar.xz"
touch "$OUTPUT/$file.asc"
echo "update $file $file.asc" >> "$OUTPUT/ubuntu_command"

# Device-generic tarball (Halium GSI)
file=$(basename "$DEVICE_GENERIC_URL")
if [ -f "$OUTPUT/$file" ]; then
    print_info "File ("$OUTPUT/$file") already exists, skipping download."
else
    download_file "$DEVICE_GENERIC_URL" "$OUTPUT"
fi
touch "$OUTPUT/$file.asc"
echo "update $file $file.asc" >> "$OUTPUT/ubuntu_command"

# Device tarball
file=$(basename "$DEVICE_TARBALL")
cp "$DEVICE_TARBALL" "$OUTPUT"
touch "$OUTPUT/$file.asc"
echo "update $file $file.asc" >> "$OUTPUT/ubuntu_command"

# Version tarball
mkdir "$OUTPUT/version"
cd "$OUTPUT/version"
mkdir -p system/etc/system-image
cat << EOF >> system/etc/system-image/channel.ini
[service]
base: system-image.ubports.com
http_port: 80
https_port: 443
channel: $OTA_CHANNEL
device: $deviceinfo_codename
EOF

mkdir -p system/etc/system-image/config.d
ln -s ../client.ini system/etc/system-image/config.d/00_default.ini
ln -s ../channel.ini system/etc/system-image/config.d/01_channel.ini
XZ_OPT="-T0" tar cvJf "../version.tar.xz" \
    --owner=root --group=root \
    system
cd -
rm -r "$OUTPUT/version"

file="version.tar.xz"
touch "$OUTPUT/$file.asc"
echo "update $file $file.asc" >> "$OUTPUT/ubuntu_command"

# End ubuntu_command
echo 'unmount system' >> "$OUTPUT/ubuntu_command"
